package br.com.sistemacomercial.model;

import java.io.Serializable;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import br.com.sistemacomercial.enums.SituacaoCheque;

/**
 * 
 * @author Danilo
 */
@Entity
@Table(name = "cheque_mov")
public class ChequeMovimentacao implements Serializable, Comparable<ChequeMovimentacao> {

	private static final long serialVersionUID = 1L;
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	@ManyToOne(targetEntity = Cheque.class, fetch = FetchType.LAZY, optional = false)
	@Fetch(FetchMode.JOIN)
	@JoinColumn(name = "cheque_id")
	private Cheque cheque;
	@Enumerated(EnumType.ORDINAL)
	@Column(name = "sit_cheque", nullable = false)
	private SituacaoCheque situacaoCheque;
	@ManyToOne(targetEntity = Funcionario.class, fetch = FetchType.LAZY, optional = true)
	@Fetch(FetchMode.JOIN)
	@JoinColumn(name = "funcionario_id")
	private Funcionario funcionario;
	@Temporal(javax.persistence.TemporalType.TIMESTAMP)
	private Date dataLancamento = new Date();
	@Column(length = 500)
	private String historico;

	public ChequeMovimentacao() {
	}

	
	public ChequeMovimentacao(Cheque cheque) {
		super();
		this.cheque = cheque;
	}


	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Cheque getCheque() {
		return cheque;
	}

	public void setCheque(Cheque cheque) {
		this.cheque = cheque;
	}

	public SituacaoCheque getSituacaoCheque() {
		return situacaoCheque;
	}

	public void setSituacaoCheque(SituacaoCheque situacaoCheque) {
		this.situacaoCheque = situacaoCheque;
	}

	public Funcionario getFuncionario() {
		return funcionario;
	}

	public void setFuncionario(Funcionario funcionario) {
		this.funcionario = funcionario;
	}

	public Date getDataLancamento() {
		return dataLancamento;
	}

	public void setDataLancamento(Date dataLancamento) {
		this.dataLancamento = dataLancamento;
	}

	public String getHistorico() {
		return historico;
	}

	public void setHistorico(String historico) {
		this.historico = historico;
	}

	@Override
	public int compareTo(ChequeMovimentacao o) {
		return this.getDataLancamento().compareTo(o.getDataLancamento());
	}


	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}


	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ChequeMovimentacao other = (ChequeMovimentacao) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

	
}
