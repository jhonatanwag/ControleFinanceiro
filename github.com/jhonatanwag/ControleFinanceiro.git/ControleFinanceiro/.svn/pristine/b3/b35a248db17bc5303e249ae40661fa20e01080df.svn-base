package br.com.sistemacomercial.repository;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

import javax.persistence.NoResultException;
import javax.persistence.PersistenceException;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

import br.com.sistemacomercial.enums.SituacaoDocumento;
import br.com.sistemacomercial.enums.TipoTitulo;
import br.com.sistemacomercial.model.Cliente;
import br.com.sistemacomercial.model.ParcelaTitulo;
import br.com.sistemacomercial.model.Titulo;
import br.com.sistemacomercial.model.Venda;
import br.com.sistemacomercial.repository.filter.TituloFilter;
import br.com.sistemacomercial.service.NegocioException;
import br.com.sistemacomercial.util.jpa.Transactional;

public class Titulos extends RepositoryAbstrato<Titulo> implements Serializable {

	private static final long serialVersionUID = 1L;

	public Titulos() {
		super(Titulo.class);
	}

	@Override
	public Titulo salvar(Titulo objeto) {
		return super.salvar(objeto);
	}

	@Transactional
	public void geraTituloVenda(Venda venda) {
		try {
			Titulo titulo = new Titulo();
			titulo.setTipoTitulo(TipoTitulo.RECEBER);
			venda.setTitulo(titulo);
			ParcelaTitulo parcelaTitulo = new ParcelaTitulo(titulo);
			parcelaTitulo.setDataVencimento(new Date());
			parcelaTitulo.setNumeroParcela(1);
			parcelaTitulo.setSituacaoTitulo(SituacaoDocumento.NORMAL);
			parcelaTitulo.setValorDesconto(BigDecimal.ZERO);
			parcelaTitulo.setValorJuro(BigDecimal.ZERO);
			parcelaTitulo.setValorRecebido(BigDecimal.ZERO);
			parcelaTitulo.setValorTitulo(venda.getTotalLiquidoVenda());
			titulo.getParcelasTitulos().add(parcelaTitulo);
		} catch (PersistenceException e) {
			throw new NegocioException("Problema ao criar a movimentação do caixa");
		}
	}
	
	@Transactional
	public void cancelarTituloVenda(Venda venda) {
		try {
			for(ParcelaTitulo parcelaTitulo : venda.getTitulo().getParcelasTitulos()){
				parcelaTitulo.setSituacaoTitulo(SituacaoDocumento.CANCELADO);	
			}
										
		} catch (PersistenceException e) {
			throw new NegocioException("Problema ao cancelar o título da venda!");
		}
	}

	@SuppressWarnings("unchecked")
	public List<Titulo> filtrados(TituloFilter filtro) {
		Session session = manager.unwrap(Session.class);
		Criteria criteria = session.createCriteria(Titulo.class);

		if (filtro.getIdDe() != null && filtro.getIdAte() != null) {
			criteria.add(Restrictions.between("id", filtro.getIdDe(), filtro.getIdAte()));
		}

		if (filtro.getTipoTitulo() != null) {
			criteria.add(Restrictions.eq("tipoTitulo", filtro.getTipoTitulo()));
		}

		if (filtro.getCliente() != null) {
			criteria.add(Restrictions.eq("tipoTitulo", filtro.getTipoTitulo()));
		}

		return criteria.addOrder(Order.asc("id")).list();
	}

	public List<ParcelaTitulo> parcelasReceberPorCliente(Cliente cliente) {
		try {
			return manager.createQuery(
					"SELECT a FROM ParcelaTitulo a INNER JOIN a.titulo b INNER JOIN b.venda c "
							+ "WHERE a.titulo.id = b.id and b.id = c.titulo.id and a.situacaoTitulo = 0 and b.tipoTitulo = 1 and a.valorRecebido = 0 and c.cliente.id = :cliente_id ORDER BY a.dataVencimento",
					ParcelaTitulo.class).setParameter("cliente_id", cliente.getId()).getResultList();
		} catch (NoResultException e) {
			return null;
		}
	}

}
