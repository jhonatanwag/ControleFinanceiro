package br.com.sistemacomercial.repository;

import java.io.Serializable;
import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import br.com.sistemacomercial.enums.CaixaStatus;
import br.com.sistemacomercial.model.LancFluxoCaixa;
import br.com.sistemacomercial.repository.filter.LancFluxoCaixaFilter;
import br.com.sistemacomercial.service.NegocioException;
import br.com.sistemacomercial.util.jpa.Transactional;

public class LancFluxoCaixas extends RepositoryAbstrato<LancFluxoCaixa> implements Serializable {

	public LancFluxoCaixas() {
		super(LancFluxoCaixa.class);
	}

	private static final long serialVersionUID = 1L;

	@Override
	public LancFluxoCaixa salvar(LancFluxoCaixa objeto) {
		return super.salvar(objeto);
	}

	@Override
	@Transactional
	public void remover(Long id) {
		LancFluxoCaixa lancFluxo = porId(id);
		if (!lancFluxo.getCaixaMovimentacao().getCaixa().getCaixaStatus().equals(CaixaStatus.A)) {
			throw new NegocioException("Lançamento do fluxo de caixa não pode ser excluído caixa não está aberto!");
		}

		super.remover(id);
	}

	@SuppressWarnings("unchecked")
	public List<LancFluxoCaixa> filtrados(LancFluxoCaixaFilter filtro) {
		Session session = manager.unwrap(Session.class);
		Criteria criteria = session.createCriteria(LancFluxoCaixa.class);

		if (filtro.getIdDe() != null && filtro.getIdAte() != null) {
			criteria.add(Restrictions.between("id", filtro.getIdDe(), filtro.getIdAte()));
		}

		return criteria.addOrder(Order.asc("id")).list();
	}

	public LancFluxoCaixa porId(Long id) {
		return manager.find(LancFluxoCaixa.class, id);
	}

}
