package br.com.sistemacomercial.repository;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.List;

import javax.inject.Inject;
import javax.persistence.PersistenceException;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

import br.com.sistemacomercial.enums.EntradaSaida;
import br.com.sistemacomercial.enums.TipoVenda;
import br.com.sistemacomercial.model.Caixa;
import br.com.sistemacomercial.model.CaixaMovimentacao;
import br.com.sistemacomercial.model.Funcionario;
import br.com.sistemacomercial.model.LancFluxoCaixa;
import br.com.sistemacomercial.model.Recebimento;
import br.com.sistemacomercial.model.Terminal;
import br.com.sistemacomercial.model.TipoDespesa;
import br.com.sistemacomercial.model.Venda;
import br.com.sistemacomercial.repository.filter.CaixaFilter;
import br.com.sistemacomercial.security.FuncionarioLogado;
import br.com.sistemacomercial.service.NegocioException;
import br.com.sistemacomercial.util.DataUtils;
import br.com.sistemacomercial.util.jpa.Transactional;

public class Caixas extends RepositoryAbstrato<Caixa> implements Serializable {

	private static final long serialVersionUID = 1L;
	@Inject
	@FuncionarioLogado
	private Funcionario funcionarioLogado;
	
	public Caixas() {
		super(Caixa.class);
	}
		
	
    @Override
	public Caixa salvar(Caixa caixa) {
		return super.salvar(caixa);
	}
	
	
	@Transactional
	public void criaMovimentoCaixa(Terminal terminal, Venda venda) {
		try {
			Caixa caixa = caixaAbertoPorTerminal(terminal);
			CaixaMovimentacao caixaMovimentacao = new CaixaMovimentacao(caixa, venda);
			caixaMovimentacao.setValorCartao(BigDecimal.ZERO);
			caixaMovimentacao.setValorChequeVista(BigDecimal.ZERO);
			caixaMovimentacao.setValorChequePre(BigDecimal.ZERO);
			caixaMovimentacao.setValorDinheiro(venda.getTotalLiquidoVenda());
			caixaMovimentacao.setValorLancamento(venda.getTotalLiquidoVenda());			
			caixaMovimentacao.setFuncionario(funcionarioLogado);
			if(venda.getTipoVenda().equals(TipoVenda.A)){
				caixaMovimentacao.setCompoeMovimentacaoFinanceira(true);
			}else{
				caixaMovimentacao.setCompoeMovimentacaoFinanceira(false);
			}
			caixaMovimentacao
					.setHistorico("Venda: " + venda.getId() +" Tipo: "+venda.getTipoVenda().toString()  +" Vendedor: " + venda.getVendedor().getPessoa().getNome()
							+ " Dat./Hora: " + DataUtils.converteDataEmString(venda.getDataVenda(), "dd/MM/yyyy")
							+ " Total:" + venda.getTotalLiquidoVenda());
			caixa.getCaixaMovimentacaos().add(caixaMovimentacao);
		} catch (PersistenceException e) {
			throw new NegocioException("Problema ao criar a movimentação do caixa venda");
		}
	}
	
	@Transactional
	public void criaMovimentoCaixa(Terminal terminal, Recebimento recebimento) {
		try {
			Caixa caixa = caixaAbertoPorTerminal(terminal);
			CaixaMovimentacao caixaMovimentacao = new CaixaMovimentacao(caixa, recebimento);	
			caixaMovimentacao.setValorCartao(recebimento.getValorCartao());
			caixaMovimentacao.setValorChequeVista(BigDecimal.ZERO);
			caixaMovimentacao.setValorChequePre(recebimento.getValorCheque());
			caixaMovimentacao.setValorDinheiro(recebimento.getValorDinheiro());
			caixaMovimentacao.setValorLancamento(recebimento.getValorTotalRecebimento());
			caixaMovimentacao.setCompoeMovimentacaoFinanceira(true);
			caixaMovimentacao.setFuncionario(funcionarioLogado);
			caixaMovimentacao
					.setHistorico("Receb: " + recebimento.getId() + "Cli.: "+ recebimento.getCliente().getPessoa().getNome()+ " Func: " +funcionarioLogado.getPessoa().getNome()
							+ " Dat./Hora: " + DataUtils.converteDataEmString(recebimento.getDataRecebimento(), "dd/MM/yyyy")
							+ " Total:" + recebimento.getValorTotalRecebimento());
			caixa.getCaixaMovimentacaos().add(caixaMovimentacao);
		} catch (PersistenceException e) {
			throw new NegocioException("Problema ao criar a movimentação do caixa recebimento");
		}
	}
	
	

	@Transactional
	public void criaMovimentoCaixa(Terminal terminal, LancFluxoCaixa lancFluxoCaixa) {
		try {
			Caixa caixa = caixaAbertoPorTerminal(terminal);
			CaixaMovimentacao caixaMovimentacao = new CaixaMovimentacao(caixa, lancFluxoCaixa);	
			caixaMovimentacao.setValorCartao(BigDecimal.ZERO);
			caixaMovimentacao.setValorChequePre(BigDecimal.ZERO);
			if(lancFluxoCaixa.getTipoDespesa().getEntradaSaida().equals(EntradaSaida.S)){
				caixaMovimentacao.setValorChequeVista(lancFluxoCaixa.getValorCheque());			
				caixaMovimentacao.setValorDinheiro(lancFluxoCaixa.getValorDinheiro());
				caixaMovimentacao.setValorLancamento(lancFluxoCaixa.getValorTotalLancamento());
			}else{
				BigDecimal valorCheque = lancFluxoCaixa.getValorCheque().multiply(new BigDecimal("-1"));
				caixaMovimentacao.setValorChequeVista(valorCheque);
				BigDecimal valorDinheiro = lancFluxoCaixa.getValorDinheiro().multiply(new BigDecimal("-1"));
				caixaMovimentacao.setValorDinheiro(valorDinheiro);
				BigDecimal valorTotal = lancFluxoCaixa.getValorTotalLancamento().multiply(new BigDecimal("-1"));
				caixaMovimentacao.setValorLancamento(valorTotal);
			}			
			caixaMovimentacao.setFuncionario(funcionarioLogado);
			caixaMovimentacao.setCompoeMovimentacaoFinanceira(true);
			caixaMovimentacao
					.setHistorico("Lanc. Fluxo: "+ lancFluxoCaixa.getTipoDespesa().getDescricao() + " "+lancFluxoCaixa.getObservacao());
			caixa.getCaixaMovimentacaos().add(caixaMovimentacao);
		} catch (PersistenceException e) {
			throw new NegocioException("Problema ao criar a movimentação do caixa lançamento em fluxo de caixa");
		}
	}
	
	
	
	@Transactional
	public void estornoMovimentoCaixa(Terminal terminal, Venda venda) {
		try {
			Caixa caixa = caixaAbertoPorTerminal(terminal);
			CaixaMovimentacao caixaMovimentacao = new CaixaMovimentacao(caixa, venda);
			caixaMovimentacao.setValorCartao(BigDecimal.ZERO);
			caixaMovimentacao.setValorChequeVista(BigDecimal.ZERO);
			caixaMovimentacao.setValorChequePre(BigDecimal.ZERO);
			caixaMovimentacao.setValorDinheiro(BigDecimal.ZERO);
			BigDecimal valorEstornado = venda.getTotalLiquidoVenda().multiply(new BigDecimal("-1"));
			caixaMovimentacao.setValorLancamento(valorEstornado);
			if(venda.getTipoVenda().equals(TipoVenda.A)){
				caixaMovimentacao.setCompoeMovimentacaoFinanceira(true);
			}else{
				caixaMovimentacao.setCompoeMovimentacaoFinanceira(false);
			}
			caixaMovimentacao.setFuncionario(funcionarioLogado);
			caixaMovimentacao
					.setHistorico("(ESTORNO) Venda: " + venda.getId() + " Vendedor: " + venda.getVendedor().getPessoa().getNome()
							+ " Dat./Hora: " + DataUtils.converteDataEmString(venda.getDataVenda(), "dd/MM/yyyy")
							+ " Total:" + venda.getTotalLiquidoVenda());
			caixa.getCaixaMovimentacaos().add(caixaMovimentacao);
		} catch (PersistenceException e) {
			throw new NegocioException("Problema ao criar a movimentação de estorno da venda");
		}
	}

	

	public Caixa caixaAbertoPorTerminal(Terminal terminal) {
		Session session = manager.unwrap(Session.class);
		Criteria criteria = session.createCriteria(Caixa.class);
		criteria.add(Restrictions.eq("terminalAbertura.id", terminal.getId()));
		criteria.add(Restrictions.isNull("dataFechamento"));
		return (Caixa) criteria.uniqueResult();
	}

	@SuppressWarnings("unchecked")
	public List<Caixa> filtrados(CaixaFilter filtro) {
		Session session = manager.unwrap(Session.class);
		Criteria criteria = session.createCriteria(Caixa.class);

		if (filtro.getIdDe() != null && filtro.getIdAte() != null) {
			criteria.add(Restrictions.between("id", filtro.getIdDe(), filtro.getIdAte()));
		}

		if (filtro.getDataAberturaIni() != null && filtro.getDataAberturaFim() != null) {
			criteria.add(Restrictions.between("dataAbertura", filtro.getIdDe(), filtro.getIdAte()));
		}

		if (filtro.getDataFechamentoIni() != null && filtro.getDataFechamentoFim() != null) {
			criteria.add(Restrictions.between("dataFechamento", filtro.getIdDe(), filtro.getIdAte()));
		}

		return criteria.addOrder(Order.asc("id")).list();
	}

}
